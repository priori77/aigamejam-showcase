---
description: 
globs: 
alwaysApply: true
---
- 모든 출력은 MDX 형식으로 작성하라.
- 모든 파일 이름은 kebab-case로 짓고, 확장자는 **TypeScript (TSX)**를 사용하라 (예: `login-form.tsx`).
- 기존 코드의 작은 변경사항은 `<QuickEdit>` 컴포넌트를 사용하여 수정하라.
- 이미 생성된 프로젝트를 편집할 때는 동일한 project ID를 유지하고, 관련된 파일만 수정하며 전체 프로젝트를 다시 생성하지 마라.
- shadcn/ui 라이브러리의 UI 컴포넌트는 기본 제공되므로 소스 코드를 복사하여 출력하지 말고 import하여 사용하라. 필요한 스타일 변경은 해당 컴포넌트를 `<QuickEdit>`로 수정하라.
- 파일을 삭제하거나 이름 변경/이동할 때는 MDX 컴포넌트인 `<DeleteFile>`과 `<MoveFile>`을 각각 사용하라. (`<MoveFile>` 사용 시 관련 import 경로들도 함께 수정할 것.)
- 사용자가 별다른 지시 없이 UI 스크린샷이나 이미지만 제공한 경우, 해당 디자인을 충실히 재현하고 암시된 모든 기능을 구현하라.
- Next.js App Router (최신 버전) 환경을 기본으로 가정하라. 가능하면 React Server Component를 활용하고, Next.js Pages Router와 같은 구식 패턴은 사용하지 마라.
- Next.js, Tailwind CSS, shadcn/ui, Lucide React 등 주요 라이브러리는 기본 내장되어 있어 import만 하면 된다. 별도의 패키지 설치나 `package.json` 작성은 하지 마라.
- 환경 변수는 Vercel 플랫폼에 사전 정의된 값만 사용하고, `.env` 파일은 사용하지 마라. 새로운 변수가 필요하면 `<AddEnvironmentVariables>` 컴포넌트를 이용하라.
- 기본 스타일링에는 Tailwind CSS 유틸리티 클래스와 shadcn/ui 컴포넌트를 사용하라.
- 특별한 디자인 지시가 없으면 Tailwind CSS의 기본 색상 클래스(예: `bg-primary`, `text-primary-foreground`)만 사용하라. 임의로 파란색/남색(indigo/blue) 계열 색상을 사용하지 말고, 사용자가 참조 이미지를 제공했다면 해당 이미지의 색상 팔레트를 따르라.
- 모든 UI는 반응형(Responsive)으로 구현하라.
- UI는 기본적으로 흰색 배경 위에 설계하라. 다른 배경색이 필요하면 해당 색상의 Tailwind 배경 클래스가 적용된 래퍼 컨테이너로 감싸라.
- 다크 모드가 필요하면 요소에 `dark` 클래스를 수동으로 토글하여 구현하라 (자동 적용되지 않으므로 JS로 제어). 다크 모드 시에도 충분한 대비로 텍스트 가독성을 유지하라.
- 이미지가 비어있는 자리에는 `/placeholder.svg?height={높이}&width={너비}` 형식의 URL로 플레이스홀더 이미지를 사용하라.
- 사용자가 제공한 이미지는 (사용 의도가 명확하다면) URL로 임베드하여 활용하라.
- 아이콘은 `<svg>` 코드를 직접 작성하지 말고 `lucide-react` 패키지의 아이콘 컴포넌트를 사용하라.
- 3D 모델(`.glb`, `.gltf`)과 오디오(`.mp3`) 파일도 필요에 따라 지원하라. 오디오 파일은 기본 `<audio>` 태그와 JavaScript를 사용하여 재생하라.
- 캔버스(`<canvas>`)에 이미지를 그릴 경우 CORS 오류를 피하기 위해 `new Image()` 객체에 `crossOrigin="anonymous"` 속성을 설정하라.
- 웹 접근성을 준수하라: 시맨틱 HTML 요소를 사용하고 적절한 ARIA 속성을 부여하며, 모든 이미지에는 설명적인 `alt` 텍스트를 포함시켜라.
- AI 기능이 필요하면 오직 Vercel AI SDK만 사용하라. langchain이나 openai-edge 등 외부 AI 라이브러리는 사용하지 마라.
- 텍스트 생성에는 `generateText` 함수를, 스트리밍 응답이 필요하면 `streamText` 함수를 활용하라.
- AI 모델을 호출할 때는 코드에 `import { generateText, streamText } from 'ai'`와 `import { openai } from '@ai-sdk/openai'`를 추가하라.
- AI 관련 코드는 모두 TypeScript/JavaScript로 작성하고, Python 코드는 사용하지 마라.
- Next.js API Route에서 AI SDK를 사용할 경우 Edge Runtime(`runtime: 'edge'`)을 사용하지 마라.
- 필요한 경우 Mermaid(다이어그램)와 LaTeX(수식) MDX 컴포넌트를 사용하여 그림이나 공식을 표현할 수 있다.

- 항상 최신 기술과 모범 사례를 따라 구현하라 (예: 최신 버전 Next.js의 기능 활용 등).``